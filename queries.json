{
    "queries": {
        "outcmd": {
            "type": "sql",
            "command": "Select subid, trunc(tmout),funccode,state,priority,count(*) from outcmd group by subid,trunc(tmout),funccode,state,priority order by subid,trunc(tmout),funccode,state,priority;"
        },
        "dsht": {
            "type": "sql",
            "command": "select amrcaljobno as \"Job Number\", to_char(METERMITCURRDATETIME, 'MM/DD/YY HH24:MI') as \"Date\", (case when amrreadind = 6 then 'Daily Shift TC' when amrreadind = 1 then 'TC' when amrreadind = 8 then 'TD' when amrreadind = 10 then 'PREVTD' end) as \"Job Type\", count(case when status='Success' then 1 end) as \"Success Count\", count(case when status='Failed' then 1 end) as \"Failed Count\" from (select md.AMRCALJOBNO, cal.amrreadind, METERMITCURRDATETIME, md.serialnumber, case WHEN (md.METERMITQUALITYCODE in (3,4,5,6,7)) then 'Success' else 'Failed' end status from METERACCTSMIT md inner join meteraccts ma on md.serialnumber = ma.serialnumber and md.serialport = ma.serialport and md.utilacctid = ma.utilacctid and md.amrcaljobno in (select amrcaljobno from amrcalendar where amrreadind in (1,6,8,10)) inner join amrcalendar cal on md.amrcaljobno = cal.amrcaljobno and (md.METERMITCURRDATETIME<=SYSDATE and md.METERMITCURRDATETIME >= SYSDATE-5)) group by amrcaljobno, amrreadind, METERMITCURRDATETIME order by METERMITCURRDATETIME asc;"
        },
        "interval": {
            "type": "sql",
            "command": "SELECT LOGDATE, QUALITYCODE, COUNT(DISTINCT SERIALNUMBER) AS COUNT FROM ( SELECT LOGDATE, QUALITYCODE, SERIALNUMBER FROM AMRHOURLYDATA UNPIVOT ( QUALITYCODE FOR CODE IN ( QUALITYCODE01 AS 'QUALITYCODE01', QUALITYCODE02 AS 'QUALITYCODE02', QUALITYCODE03 AS 'QUALITYCODE03', QUALITYCODE04 AS 'QUALITYCODE04', QUALITYCODE05 AS 'QUALITYCODE05', QUALITYCODE06 AS 'QUALITYCODE06', QUALITYCODE07 AS 'QUALITYCODE07', QUALITYCODE08 AS 'QUALITYCODE08', QUALITYCODE09 AS 'QUALITYCODE09', QUALITYCODE10 AS 'QUALITYCODE10', QUALITYCODE11 AS 'QUALITYCODE11', QUALITYCODE12 AS 'QUALITYCODE12', QUALITYCODE13 AS 'QUALITYCODE13', QUALITYCODE14 AS 'QUALITYCODE14', QUALITYCODE15 AS 'QUALITYCODE15', QUALITYCODE16 AS 'QUALITYCODE16', QUALITYCODE17 AS 'QUALITYCODE17', QUALITYCODE18 AS 'QUALITYCODE18', QUALITYCODE19 AS 'QUALITYCODE19', QUALITYCODE20 AS 'QUALITYCODE20', QUALITYCODE21 AS 'QUALITYCODE21', QUALITYCODE22 AS 'QUALITYCODE22', QUALITYCODE23 AS 'QUALITYCODE23', QUALITYCODE24 AS 'QUALITYCODE24' ) ) ) WHERE LOGDATE >= TRUNC(SYSDATE) - 5 and QUALITYCODE not in (3,0) GROUP BY LOGDATE, QUALITYCODE ORDER BY LOGDATE, QUALITYCODE, COUNT;"
        },
        "retry_jobs": {
            "type": "sql",
            "command": "select jobno, to_char(nxt_run_date, 'MM/DD/YY HH24:MI'), jobdesc, status, command from dcsi_job_queue where command like 'NA_SP_SIMPLE_RETRY%' or command like 'MIT_NA_SP_PKG.MIT_SCHEDULE_RETRY_EXEC%';"
        },
        "error_log": {
            "type": "sql",
            "command": "select distinct informationdata from tnserrorlog where datetime like sysdate and informationdata not like ('%iiDEAS_%') and informationdata not like ('%Interval Data%') and informationdata not like ('%fetched column value is NULL%');"
        },
        "retries": {
            "type": "SQL",
            "command": "select jobno, to_char(nxt_run_date, 'MM/DD/YY HH24:MI'), jobdesc, status, command from dcsi_job_queue where command like 'NA_SP_SIMPLE_RETRY%' or command like 'MIT_NA_SP_PKG.MIT_SCHEDULE_RETRY_EXEC%';"
        },
        "priorities": {
            "type": "SQL",
            "command": "select case commandname when 'AMR_TD_P0_C' then 'TD Non:Mapped' when 'AMR_TD_P0_P' then 'PrevTD Non:Mapped' when 'AMR_DAILY_TC_P0' then 'Daily Shift Non:Mapped' when 'AMR_HOURLY_TC_P0' then 'Hourly TC Non:Mapped' when 'AMR_CMT_DEM_RESET' then 'Vectron Demand Reset Command' when 'AMR_CMT_NONBILL' then 'Hourly TC Vectron' when 'AMR_ALTIMUS_DEM_RESET' then 'Altimus Demand Reset Command' when 'AMR_ALTIMUS_BILL' then 'Daily Shift Mapped' when 'AMR_ALTIMUS_NONBILL' then 'Hourly TC Mapped' when 'AMR_EMTR_TC_P0' then 'Hourly TC EMT Multiport' when 'AMR_INT_30_TC_P0' then 'Interval Data 30 Non:Mapped' when 'AMR_INT_15_TC_P0' then 'Interval Data 15 Non:Mapped' when 'AMR_READ_INTVERVAL60' then 'Hist Interval 60 Mapped' when 'AMR_READ_INTVERVAL30' then 'Hist Interval 30 Mapped' when 'AMR_READ_INTVERVAL15' then 'Hist Interval 15 Mapped' when 'AMR_READ_HST_MAP' then 'READ HST MAP' when 'AMR_ALTIMUS_RESET_CNT' then 'Altimus Read Demand Reset Count Command' when 'AMR_CMT_RESET_CNT' then 'Vectron Read Demand Reset Count Command' when 'SEARCH' then 'Search' when 'DEASSIGN' then 'Deassign' when 'READ VERSION' then 'Read Version' when 'WRITE REGISTER DEASSIGN' then 'Write register deassign' when 'SDCS - Arm Switch for Close' then 'Arm switch for close' when 'SDCS - Close Switch' then 'Close switch' when 'SDCS - Open Switch' then 'Open switch' when 'SDCS - Read Switch Status' then 'Read switch status' when 'Load Control' then 'Load Control' when 'Read DRU Status' then 'Read DRU Status' when 'Set Profile Weighting' then 'Set profile weighting' when 'Configure Set Points' then 'Configure set points' when 'Assign 1-way Address' then 'Assign 1-way address' when 'PROASYS Command' then 'ProAsys Command' when 'PROASYS Command via Optimum' then 'PROASYS Command via Optimum' when 'PING_METER' then 'PING METER' when 'AMR_ALTIMUS_DEM_RESET' then 'Altimus Demand Reset Command' end as \"Command Name\", DFLTCCEPRIORITY1 as TNS_priority1, DFLTCCEPRIORITY2 as TNS_priority2, DFLTSCEPRIORITY1 as SCE_priority1, DFLTSCEPRIORITY2 as SCE_priority2, exchangetypeid, titleid, commandid from (select ed.exchangetypeid, ed.titleid, commandname, ed.commandid, DFLTCCEPRIORITY1, DFLTCCEPRIORITY2, DFLTSCEPRIORITY1, DFLTSCEPRIORITY2 from encodflt ed join encocmd ec on ed.commandid = ec.commandid and ed.titleid = ec.titleid where (ed.commandid in (1,2) and ed.titleid = 15) or (ed.commandid in (40, 127, 145, 162, 135, 215, 217, 219, 144, 124, 188, 185, 113, 115, 133, 143, 243, 244, 223) and ed.titleid = 10) or (ed.commandid in (1,2,3,4) and ed.titleid = 15) or (ed.commandid in (1,2,3,4) and ed.titleid = 35) or (ed.commandid in (1,2,3,4,5) and ed.titleid = 74) or (ed.commandid in (1,2) and ed.titleid = 5) order by ed.titleid, ed.commandid asc);"
        },
        "2way_jobs": {
            "type": "SQL",
            "command": "select status, jobdesc, command, to_char(nxt_run_date, 'MM/DD/YY HH24:MI') from dcsi_job_queue where (command like '%TWASGN%' or command like '%TWDASGN%') and status = 'ACTIVE';"
        },
        "2way_status": {
            "type": "SQL",
            "command": "select a.twfunc, a.twstatus, b.RESPONSESTATUSSHORTDESC, count(*) from twfuncgrpdet a, responsestatusxref b where a.twstatus = b.responsestatustns and b.responsestatustype = 40 and a.serialnumber > 0 group by a.twfunc, a.twstatus, b.RESPONSESTATUSSHORTDESC order by a.twfunc, a.twstatus;"
        },
        "2way_mixed": {
            "type": "SQL",
            "command": "Get-PSDrive | Where-Object {$_.Provider.Name -eq 'FileSystem'} | Select-Object Name, Used, Free"
        },
        "2way_function": {
            "type": "SQL",
            "command": "select TNSDEFAULTNAME, TNSDEFAULTTXT1 from TNSDEFAULTS where TNSDEFAULTNAME IN ('DRU_TWAPPLID','LCTWAPPLID','AMRTWAPPLID','INTERVALTWAPPLID','PROASYS_TWAPPLID');"
        },
        "subs": {
            "type": "SQL",
            "command": "select subid,  subname, case substatus when 0 then 'offline' when 1 then 'Downloading tables' when 2 then 'Connected' when 3 then 'Slowpoll' when 8 then 'Configured' else 'unknown' end as \"State\", TCPHOST from scemain;"
        },
        "subs_notif": {
            "type": "SQL",
            "command": "select to_char(datetime, 'MM/DD/YY HH24:MI') as DateTime, SUBNAME as \"Sub Name\", NOTTYPENAME as \"Type\", NOTNAME as \"Name\", NOTDATA as \"Data\" from notifications n join notdefxref d on n.notid = d.notid and d.nottype = n.nottype where datetime >= sysdate-1 order by datetime desc;"
        },
        "active_jobs": {
            "type": "SQL",
            "command": "select amrcaljobno as \"Job Number\" ,to_char(cmdlststartdt, 'MM/DD/YY HH24:MI') as \"Start Date\", to_char(cmdlstcutoffdt, 'MM/DD/YY HH24:MI') as \"Stop Date\", (case when amrreadind = 6 then 'Daily Shift TC' when amrreadind = 1 then 'TC' when amrreadind = 8 then 'TD' when amrreadind = 10 then 'PREVTD' end) as \"Job Type\" , count(case when status='Success' then 1 end) as \"Success Count\", count(case when status='Failed' then 1 end) as \"Failed Count\" from (select md.AMRCALJOBNO,cal.amrreadind, cmdlststartdt, cmdlstcutoffdt, md.serialnumber,case WHEN (md.METERMITQUALITYCODE in (3,4,5,6,7)) then 'Success' else 'Failed' end status from amrcmdlstmit md inner join meteraccts ma on md.serialnumber = ma.serialnumber and md.serialport = ma.serialport and md.utilacctid = ma.utilacctid and md.amrcaljobno in (select amrcaljobno from amrcalendar where amrreadind in (1,6,8,10)) inner join amrcalendar cal on md.amrcaljobno = cal.amrcaljobno and (md.cmdlststartdt<=SYSDATE and md.cmdlststartdt >= SYSDATE-10)) group by amrcaljobno, amrreadind, cmdlststartdt, cmdlstcutoffdt order by cmdlststartdt asc;"
        },
        "ora_trans": {
            "type": "SQL",
            "command": "SELECT s.username, s.sid, s.serial#, s.status, s.machine, s.program, t.sql_id, t.sql_text, s.event AS wait_event, s.seconds_in_wait AS wait_seconds FROM v$session s JOIN v$sql t ON s.sql_id = t.sql_id WHERE s.status = 'ACTIVE' AND s.username IS NOT NULL ORDER BY s.sid;"
        },
        "sys_sched": {
            "type": "SQL",
            "command": "select jobdesc, nxt_run_date, command from dcsi_job_queue where nxt_run_date >= sysdate-1 and jobdesc not in ('AMR INTERVAL RETRY','SENTINEL DELAY','UMT-C DELAY','UMT-R DELAY', 'UMT-R DELAY','S4/SEN INTERVAL RETRY','AMR RETRY','ALTIMUS RETRY','SENTINEL RETRY','CMT RETRY','READ RESET COUNT','AMR CUTOFF SCHEDULE', 'CML DEM RESET SCHEDULE', 'S4 RETRY', 'S4 DELAY', 'ALTIMUS DELAY','PROASYS Results Cleanup');"
        },
        "addrmode": {
            "type": "SQL",
            "command": "select funccode, substr(trnsbuf1,17,2), count(*) from outcmd group by funccode, substr(trnsbuf1,17,2);"
        },
        "directories": {
            "type": "SQL",
            "command": "select directory_name, directory_path from all_directories where directory_name like '%TNS%';"
        },
        "hist_jobs": {
            "type": "sql",
            "command": "select to_char(amrcalstartdt, 'MM/DD/YY HH24:MI') as \"START\", to_char(amrcalstopdt,'MM/DD/YY HH24:MI') as \"END\", to_char(am.histdate,'MM/DD/YY HH24:MI') as \"HIST DATE\", round(24 * (amrcalstopdt - amrcalstartdt),2) as \"Duration in Hrs\", ind.amrreadinddesc, amrcalsetid, amrcalsetvalue, cal.amrcaljobno from amrcalendar cal join amrreadind ind on cal.amrreadind = ind.amrreadind join amrjobdata am on am.amrcaljobno = cal.amrcaljobno where amrcaldate >= sysdate-5 order by amrcalstartdt asc;"
        },
        "ora_status": {
            "type": "sql",
            "command": "SELECT INSTANCE_NAME, STATUS FROM V$INSTANCE;"
        },
        "ora_tablespace": {
            "type": "sql",
            "command": "SELECT TABLESPACE_NAME, SUM(BYTES)/1024/1024 AS \"Size (MB)\", SUM(DECODE(FREE_SPACE, NULL, 0, FREE_SPACE))/1024/1024 AS \"Free (MB)\", (SUM(BYTES) - SUM(DECODE(FREE_SPACE, NULL, 0, FREE_SPACE)))/1024/1024 AS \"Used (MB)\" FROM DBA_DATA_FILES GROUP BY TABLESPACE_NAME;"
        },
        "ora_invalid": {
            "type": "sql",
            "command": "SELECT owner, object_type, object_name FROM all_objects WHERE status = 'INVALID';"
        },
        "dem_reset": {
            "type": "sql",
            "command": "select amrcaljobno, amrcalstartdt, amrcalstopdt, ind.amrreadinddesc, amrcalsetid, amrcalsetvalue from amrcalendar cal join amrreadind ind on cal.amrreadind = ind.amrreadind where amrcaldate >= sysdate-30 and ind.amrreadind in (24,2,13,36) order by amrcalstartdt desc;"
        },
        "services": {
            "type": "powershell",
            "command": "Get-Service -DisplayName 'DCSI*'"
        },
        "server_restarts": {
            "type": "powershell",
            "command": "Get-EventLog -LogName System | Where-Object {$_.EventID -eq 6005 -or $_.EventID -eq 6009} | Format-Table"
        },
        "ora_events": {
            "type": "powershell",
            "command": "Get-WinEvent -LogName Application | Where-Object { $_.ProviderName -like \"*Oracle*\" -or $_.Message -like \"*Oracle*\" -and $_.TimeCreate -ge  (Get-Date).AddDays(-5) } | Format-Table TimeCreated, ProviderName, Id, Message -AutoSize"
        },
        "stop_services": {
            "type": "powershell",
            "command": "Stop-Service -DisplayName 'DCSI TNS Watchdog Server' -Force"
        },
        "start_services": {
            "type": "powershell",
            "command": "Start-Service -DisplayName 'DCSI TNS Watchdog Server'"
        },
        "find_meter_optimum": {
            "type": "powershell",
            "command": "Select-String -path 'F:\\Program Files` (x86)\\DCSI\\Optimum` Windows` Service\\Logs\\*' -Pattern "
        }
    }
}